#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rpsls:server');
var http = require('http');
var Player = require('../util/Player.js');
var Room = require('../util/Room.js');
var uuid = require('node-uuid');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * socket.io 
 */
var io = require('socket.io')(server);

var players = {};
var rooms = [];

io.on('connection', function(user){
  user.bool = false;

  console.log('a user has connected');
  user.player = new Player(user.id);
  console.log(rooms);

  if (rooms.length > 0 && !user.bool){
    user.emit('currentRooms', rooms);
    user.bool = true;
  }

  user.on('disconnect', function(){
    console.log('a user has left');
  });

  user.on('addName', function(name){
    if(name !== '' && !this.player.userName){
      this.player.addUserName(name);
      console.log('name added!', this.player.userName);
      players[user.id] = this.player;
    }
  });

  user.on('addRoom', function(roomName){
    if (!this.player.roomId && this.player.userName) {
      var id = uuid.v4();
      //create new room
      var newRoom = new Room(roomName, id, this.player.id, this.player.userName);

      //add room to rooms array
      rooms.push(newRoom);
      
      //also create socket room for the room
      this.player.room = id;

      //auto join player into room
      this.join(this.player.room);

      //also push player into room's people list
      newRoom.addPerson(this.player.id, this.player.userName);

      //update user's player object with created roomId
      this.player.roomId = this.id;
      
      //update currentRooms list
      user.broadcast.emit('addRoom', this.player.userName, roomName);
      // user.emit('currentRooms', rooms);
      
    }
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
