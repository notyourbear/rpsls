#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rpsls:server');
var http = require('http');
var Player = require('../util/Player.js');
var Room = require('../util/Room.js');
var uuid = require('node-uuid');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * socket.io 
 */
var io = require('socket.io')(server);

var players = {};
var rooms = [];

io.on('connection', function(user){
  user.bool = false;

  console.log('a user has connected');
  user.player = new Player(user.id);
  console.log('user.player', user.player);
  console.log('rooms right now', rooms);

  if (rooms.length > 0 && !user.bool){
    user.emit('currentRooms', rooms);
    user.bool = true;
  }

  user.on('disconnect', function(){
    console.log('a user has left');
  });

  user.on('chatMessage', function(message){
    user.to(this.player.room).broadcast.emit('chatMessage', message);
  });

  user.on('addName', function(name){
    if(name !== '' && !this.player.userName){
      this.player.addUserName(name);
      console.log('name added!', this.player.userName);
      console.log('this.player', this.player);
      players[user.id] = this.player;
      console.log('all the players', players);
    }
  });

  user.on('addRoom', function(roomName){
    if (!this.player.roomId && this.player.userName) {
      var id = uuid.v4();
      //create new room
      var newRoom = new Room(roomName, id, this.player.id, this.player.userName);

      //add room to rooms array
      rooms.push(newRoom);
      
      //also create socket room for the room
      this.player.room = id;

      //auto join player into room
      this.join(this.player.room);

      //also push player into room's people list
      newRoom.addPerson(this.player);

      
      //update currentRooms list
      user.broadcast.emit('addRoom', this.player.userName, roomName);

      //update created roomId
      user.emit('createdRoom', id);
     
    }
  });

  user.on('joinRoom', function(id){
    //run through all rooms
    for (var i = 0; i < rooms.length; i++){
      if(rooms[i].id === id){
        //update user's player object with current room
        this.player.room = id;

        //add player to room object
        rooms[i].addPerson(user.player);

        //also join player into room's socket
        this.join(id);

        
        //console log out rooms
        console.log(rooms);
      }
    }
  });

  user.on('checkRoom', function(id){
    //bool check:
    var bool = false;
    var checked = false;

    console.log('this is the id we are checking against', id);
    //run through all rooms
    for (var i = 0; i < rooms.length; i++){
      console.log('running through all the rooms', rooms[i]);
      console.log('the people in this room', rooms[i].people);

      if(rooms[i].id === id){
        console.log('room id ('+rooms[i].id+') is equal to asked id', id);
        //run through all players in room
        for (var j = 0; j < rooms[i].people.length; j++){
          if(user.player.room !== id){
            //check to make sure that player's associated room is not this one
              bool = true;
              console.log('\n\n\n\n\n\n\n\n\ntruthy!');
              this.emit('checkRoom', id, true);
          }
        }
      }
    }

    checked = true;

    //if person is not in room
    if (!bool && checked){
      console.log('falsy!');
      this.emit('checkRoom', id, false);
    }
  });

});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
