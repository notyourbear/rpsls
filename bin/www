#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rpsls:server');
var http = require('http');
var Player = require('../util/Player.js');
var Room = require('../util/Room.js');
var Rpsls = require('../util/Rpsls.js');
var uuid = require('node-uuid');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);


/**
  * Supporting functions 
  */
  var findCorrectRoom = function(roomId){
    var theRoom;

    for (var i = 0; i < rooms.length; i++){
      //find correct room
        if(rooms[i].id === roomId){
          theRoom = rooms[i];
        }
      }

    return theRoom;

  };

  var rpsls = new Rpsls();


/**
 * socket.io 
 */
var io = require('socket.io')(server);

var players = {};
var rooms = [];

io.on('connection', function(user){
  user.bool = false;

  console.log('a user has connected');
  user.player = new Player(user.id);
  console.log('user.player', user.player);
  console.log('rooms right now', rooms);

  if (rooms.length > 0 && !user.bool){
    user.emit('currentRooms', rooms);
    user.bool = true;
  }

  user.on('disconnect', function(){
    console.log('a user has left');
  });

  user.on('chatMessage', function(message){
    if(message !== ""){
      console.log(this.player.userName, message);
      user.to(this.player.room).emit('chatMessage', this.player.userName, message);
    }
  });

  user.on('joinGame', function(){
    var room = findCorrectRoom(this.player.room);
    var bool = room.addToGame(this.player.userName);

    user.emit('joinGame', bool, room.game);
  
  });

  user.on('addName', function(name){
    if(name !== '' && !this.player.userName){
      this.player.addUserName(name);
      console.log('name added!', this.player.userName);
      console.log('this.player', this.player);
      players[user.id] = this.player;
      console.log('all the players', players);
    }
  });

  user.on('addRoom', function(roomName){
    if (!this.player.roomId && this.player.userName) {
      var id = uuid.v4();
      //create new room
      var newRoom = new Room(roomName, id, this.player.id, this.player.userName);

      //add room to rooms array
      rooms.push(newRoom);
      
      //also create socket room for the room
      this.player.room = id;

      //auto join player into room
      this.join(this.player.room);

      //also push player into room's people list
      newRoom.addPerson(this.player);

      //and push the player into the room's game object: 
      newRoom.addToGame(this.player.userName);

      console.log('\n\n\n\n\n the rooms game now looks like:', newRoom.game);

      
      //update currentRooms list
      user.broadcast.emit('addRoom', this.player.userName, roomName, id);

      //update created roomId
      user.emit('createdRoom', id);
     
    }
  });

  user.on('joinRoom', function(id){
    var room = findCorrectRoom(id);

    //update user's player object with current room
    this.player.room = room.id;

    //add player to room object
    room.addPerson(user.player);

    //also join player into room's socket
    this.join(id);

    //c`onsole log out rooms
    console.log(rooms);

  });

  user.on('checkRoom', function(id){
    //bool check:
    var bool = false;
    var checked = false;
    var players;

    console.log('this is the id we are checking against', id);
    
    var room = findCorrectRoom(id);

    //run through all players in room
    for (var j = 0; j < room.people.length; j++){
      if(user.player.room !== id){
        //check to make sure that player's associated room is not this one
          bool = true;
          console.log('\n\n\n\n\n\n\n\n\ntruthy!');

          console.log('hey this is players', room.game);

          players = room.game;

          this.emit('checkRoom', id, true, players);
      }
    }

    checked = true;

    //if person is not in room
    if (!bool && checked){
      console.log('falsy!');
      this.emit('checkRoom', id, false);
    }
  });

  user.on('challengerHasArrived', function(){
    var room = findCorrectRoom(this.player.room);

    io.to(this.player.room).emit('challengerHasArrived', this.player);
  });

  user.on('updateProfilePlayers', function(playPiece){
    //find the correct room
    var room = findCorrectRoom(this.player.room);

    //send back the playerObject and the playPiece
    user.emit('updateProfilePlayers', playPiece, room.game);
  });

  user.on('playPiece', function(playPiece){
    //get correct room
    var room = findCorrectRoom(this.player.room);

    //check if keys for both players are set
    var count = 0,
        i,
        play1 = [],
        play2 = [],
        play1UserName,
        play2UserName;

    //update the user's property with the play piece
    room.game[this.player.userName] = playPiece;

    for (i in room.game) {
        if (room.game.hasOwnProperty(i) && room.game[i] !== null) {
            count++;

            //obtain some values just in case everything is as we want
            if (count === 1){
              play1.push(i);
              play1.push(room.game[i]);
            } else if (count === 2) {
              play2.push(i);
              play2.push(room.game[i]);
            }
        }
    }

    //if both are set evaluate game
    if(count === 2){
      var answer = rpsls.evaluate(play1[1], play2[1]);
      //answer is made up in the following way: 
      //[0]: side that won
      //[1]: syntax
      //[2]: side that lost.


      play1UserName = play1[0];
      play2UserName = play2[0];

      // console.log('\n\n\n\n\n\n\n\n\n\n 1:[name:id]:', play1UserName, play1[0]);
      // console.log('2:[name:id]:', play2UserName, play2[0]);


      //check first spot in winner array to see which side actually won and emit info back to the entire rooom :/

      //if tie, send the entire room that it was a tie
      if(answer[0] === 'tie') {
        io.to(this.player.room).emit('gameEvalTie', 'tie', playPiece);
      } else {
      
      //send to the room the info of the eval in form of:
      // userName of winner, game piece of winner, syntax, game piece of loser, userName of loser

        //if side 1 won
        if(answer[0] === play1[1]){
          io.to(this.player.room).emit('gameEval', play1UserName, answer[0], answer[1], answer[2], play2UserName);

        //if side 2 won
        } else if (answer[0] === play2[1]){
          io.to(this.player.room).emit('gameEval', play2UserName, answer[0], answer[1], answer[2], play1UserName);
        } else {
          //this actually should never be possible but, who knows:
          console.log('the impossible happened. somehow we evaulated for a winner even though it shouldnt be possible', answer);
        }

      }

      //if both aren't set... 
    } else if (count < 2) {

      //emit back to everyone in room that one person has made a move
      io.to(this.player.room).emit('waiting', this.player.userName);
      
    }

  });

  user.on('startReset', function(){
    // backend:
    //find room:
    var room = findCorrectRoom(this.player.room);

    //set room.game to have null vals
    room.resetGame();

    //fire back to front end
    io.to(this.player.room).emit('startReset');

  });

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
